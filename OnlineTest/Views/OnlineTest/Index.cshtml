@model QuestionsViewModel
@{

}
@if (TempData["TestTimeInvalid"] !=null){
    <div class="alert alert-danger">
        @TempData["TestTimeInvalid"]
    </div>
}else{
<div class="row">
    <div class="col-md-8">
        @if (TempData["Message"] != null)
        {
            <div class="alert alert-danger">
                @TempData["Message"]
            </div>
        }
        <form method="post" asp-controller="OnlineTest" asp-action="SubmitAsnwers">
            @for (int i = 0; i < Model.Questions.Count(); i++)
            {
                <div class="card mb-2" style="border:0px; border-radius: 20px;">
                    <div class="card-body">

                        <div class="fw-bold mb-2">
                            प्र: @Model.Questions[i].Id .  @Model.Questions[i].Question.Trim() <span class="text-danger"> * </span>
                            <input type="hidden" asp-for="@Model.Questions[i].Id" />
                            <input type="hidden" asp-for="@Model.Questions[i].Question" />
                        </div>

                        @for (int j = 0; j < Model.Questions[i].Answers.Count(); j++)
                        {
                            <div class="form-check mb-2">
                                @if (Model.Questions[i].SelectedAnswerId == @Model.Questions[i].Answers[j].Id)
                                {
                                    <input type="radio" checked class="form-check-input me-2" id="@Model.Questions[i].Answers[j].Id"
                               name="Questions[@i].SelectedAnswerId" value="@Model.Questions[i].Answers[j].Id" />
                                }
                                else
                                {
                                    <input type="radio" class="form-check-input me-2" id="@Model.Questions[i].Answers[j].Id"
                               name="Questions[@i].SelectedAnswerId" value="@Model.Questions[i].Answers[j].Id" />
                                }

                                <label class="form-check-label" for="@Model.Questions[i].Answers[j].Id">
                                    @Model.Questions[i].Answers[j].Answer1.Trim()
                                </label>
                            </div>

                            <input type="hidden" asp-for="@Model.Questions[i].Answers[j].Id" />
                            <input type="hidden" asp-for="@Model.Questions[i].Answers[j].QuestionId" />
                            <input type="hidden" asp-for="@Model.Questions[i].Answers[j].Answer1" />
                        }
                    </div>
                </div>
            }
            <div class="clearfix">
                <button type="submit" onclick="return confirm('Are you want to submit the test?')" class="signupbtn">Submit</button>
            </div>
        </form>
    </div>
    <div class="col-md-4">
        <div id="app" class="bottomright"></div>
    </div>
</div>
}
<script>

    const FULL_DASH_ARRAY = 283;
    const WARNING_THRESHOLD = 600;
    const ALERT_THRESHOLD = 300;

    const COLOR_CODES = {
        info: {
            color: "green"
        },
        warning: {
            color: "orange",
            threshold: WARNING_THRESHOLD
        },
        alert: {
            color: "red",
            threshold: ALERT_THRESHOLD
        }
    };

    const TIME_LIMIT = 1800;
    let timePassed = 0;
    let timeLeft = TIME_LIMIT;
    let timerInterval = null;
    let remainingPathColor = COLOR_CODES.info.color;

    document.getElementById("app").innerHTML = `
                                <div class="base-timer">
                                  <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                    <g class="base-timer__circle">
                                      <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
                                      <path
                                        id="base-timer-path-remaining"
                                        stroke-dasharray="283"
                                        class="base-timer__path-remaining ${remainingPathColor}"
                                        d="
                                          M 50, 50
                                          m -45, 0
                                          a 45,45 0 1,0 90,0
                                          a 45,45 0 1,0 -90,0
                                        "
                                      ></path>
                                    </g>
                                  </svg>
                                  <span id="base-timer-label" class="base-timer__label">${formatTime(
        timeLeft
    )}</span>
                                </div>
                                `;

    startTimer();

    function onTimesUp() {
        clearInterval(timerInterval);
    }

    function startTimer() {
        timerInterval = setInterval(() => {
            timePassed = timePassed += 1;
            timeLeft = TIME_LIMIT - timePassed;
            document.getElementById("base-timer-label").innerHTML = formatTime(
                timeLeft
            );
            setCircleDasharray();
            setRemainingPathColor(timeLeft);

            if (timeLeft === 0) {
                $(function () {
                    $('form').submit();
                });
                onTimesUp();
                return

            }
        }, 1000);
    }

    function formatTime(time) {
        const minutes = Math.floor(time / 60);
        let seconds = time % 60;

        if (seconds < 10) {
            seconds = `0${seconds}`;
        }

        return `${minutes}:${seconds}`;
    }

    function setRemainingPathColor(timeLeft) {
        const { alert, warning, info } = COLOR_CODES;
        if (timeLeft <= alert.threshold) {
            document
                .getElementById("base-timer-path-remaining")
                .classList.remove(warning.color);
            document
                .getElementById("base-timer-path-remaining")
                .classList.add(alert.color);
        } else if (timeLeft <= warning.threshold) {
            document
                .getElementById("base-timer-path-remaining")
                .classList.remove(info.color);
            document
                .getElementById("base-timer-path-remaining")
                .classList.add(warning.color);
        }
    }

    function calculateTimeFraction() {
        const rawTimeFraction = timeLeft / TIME_LIMIT;
        return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
    }

    function setCircleDasharray() {
        const circleDasharray = `${(
            calculateTimeFraction() * FULL_DASH_ARRAY
        ).toFixed(0)} 283`;
        document
            .getElementById("base-timer-path-remaining")
            .setAttribute("stroke-dasharray", circleDasharray);
    }

</script>
